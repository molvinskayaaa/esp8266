#include <OneWire.h>
#include <FastBot2.h>
#include <math.h>
#include <GyverHTTP.h>
#include <Wire.h>
#include <CD74HC4067.h>
#include <TimeLib.h>
#include <ArduinoMqttClient.h>
#include <Arduino_ConnectionHandler.h>
#include <Wire.h>
#include <GSON.h>
#include <ESP8266WebServer.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
#define BOT_TOKEN "7939415831:AAFTq2tiWJpiH3KgoT09Ymhw80G2tbke5Hs"
#define CHAT_ID "860718018"
#define ONE_WIRE_BUS 2
#define TDS_CHANNEL 4
#define PH_CHANNEL 11
#define TURBIDITY_CHANNEL 15


const char* ssid = "molvinskayaaa";
const char* password = "yaroslav2016";
const String apiKey = "9ce0bce380394587a11102931253101"; //API –∫–ª—é—á –¥–ª—è OpenWeatherMap –¥–æ 14.01


FastBot2 bot;
OneWire oneWire(ONE_WIRE_BUS);
CD74HC4067 mux(16, 5, 4, 0);
ESP8266WebServer server(80);


struct DS18B20Sensor {
    byte addr[8];
    float temperature;
    bool started;
    bool busy;
    byte data[9];
    unsigned long startTime;
};


DS18B20Sensor ds18b20 = {
    {0},
    0,
    false,
    false,
    {0},
    0
};




struct WiFiConfig {
    const char* ssid;
    const char* password;
};


WiFiConfig wifiConfig = {
    "molvinskayaaa",
    "yaroslav2016"
};


enum BotState {
    NORMAL,
    WAITING_FOR_CITY
};


BotState currentState = NORMAL; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
String city = ""; // –°–ª—É–∂–µ–±–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞


String userName = "";
String wateringTime = ""; // –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
bool wateringScheduled = false;
time_t nextWateringTime = 0;
int wateringDelay = 0;
unsigned long previousMillis = 0; // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
const long interval = 600000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (600000 –º—Å = 10 –º–∏–Ω—É—Ç)


void printAddress(byte addr[8]) {
    for (byte i = 0; i < 8; i++) {
        if (addr[i] < 16) Serial.print("0"); // –≤—ã–≤–æ–¥–∏–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å
        Serial.print(addr[i], HEX); // –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (i < 7) {
            Serial.print(":"); // —Ä–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        }
    }
}


void setupDS18b20() {
    oneWire.reset_search(); // —Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    if (!oneWire.search(ds18b20.addr)) {
        Serial.println("No DS18B20 sensor found"); // –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞—Ç—á–∏–∫
        return; // –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    Serial.print("Found device with address: ");
    printAddress(ds18b20.addr); // –≤—ã–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    Serial.println();
    if (OneWire::crc8(ds18b20.addr, 7) != ds18b20.addr[7] || ds18b20.addr[0] != 0x28) {
        Serial.println("Sensor is not a DS18B20"); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞
        return; // –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    Serial.println("Sensor is a DS18B20"); // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞
}


void startMeasurementDS18b20() {
    if (!ds18b20.started) { // –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ
        oneWire.reset(); // —Å–±—Ä–æ—Å OneWire
        oneWire.select(ds18b20.addr); // –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        oneWire.write(0x44); // –∑–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        ds18b20.started = true; // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—á–∞—Ç–æ
        ds18b20.busy = true; // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–Ω—è—Ç–æ
        ds18b20.startTime = millis(); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        Serial.println("Measurement started"); // –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    }
}


void checkBusyDS18B20() {
    if (ds18b20.started && ds18b20.busy) { // –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –∏ –∑–∞–Ω—è—Ç–æ
        if (oneWire.read_bit()) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            Serial.println("Measurement completed"); // –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            ds18b20.busy = false; // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        } else if (millis() - ds18b20.startTime >= 750) { // —Ç–∞–π–º–∞—É—Ç 750 –º—Å
            ds18b20.temperature = -127; // –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Serial.println("Timeout: Measurement assumed completed"); // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
            ds18b20.busy = false; // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        }
    }
}


void getDataDS18B20() {
    if (ds18b20.started && !ds18b20.busy) { // –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –∏ –Ω–µ –∑–∞–Ω—è—Ç–æ
        oneWire.reset(); // —Å–±—Ä–æ—Å OneWire
        oneWire.select(ds18b20.addr); // –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        oneWire.write(0xBE); // –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        for (int i = 0; i < 9; i++) {
            ds18b20.data[i] = oneWire.read(); // —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        }
        if (OneWire::crc8(ds18b20.data, 8) != ds18b20.data[8]) {
            Serial.println("CRC check failed. Invalid data received."); // –ø—Ä–æ–≤–µ—Ä–∫–∞ CRC
            ds18b20.temperature = -127; // –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        } else {
            int16_t rawTemperature = (ds18b20.data[1] << 8) | ds18b20.data[0]; // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            ds18b20.temperature = (float)rawTemperature / 16.0; // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        }
        Serial.print("Temperature: "); // –≤—ã–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        Serial.print(ds18b20.temperature);
        Serial.println(" C");
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (ds18b20.temperature > 30.0) {
            bot.sendMessage(fb::Message("–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç: " + String(ds18b20.temperature) + " C", CHAT_ID));
        } else if (ds18b20.temperature < 10.0) {
            bot.sendMessage(fb::Message("–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è: " + String(ds18b20.temperature) + " C", CHAT_ID));
        }
        ds18b20.started = false; // —Å–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    }
}


String getMuxData() {
    String results = ""; // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    int channels[] = {4, 11, 15}; // –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
    String labels[] = {"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–ª–µ–π (TDS)", "–ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å (pH)", "–ú—É—Ç–Ω–æ—Å—Ç—å (NTU)"}; // –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    for (int i = 0; i < sizeof(channels) / sizeof(channels[0]); i++) {
        int channel = channels[i];
        mux.channel(channel); // –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª
        int value = analogRead(A0); // —Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
        float calibratedValue;
        String alert = "";
        if (channel == 4) {
            int maxTDS = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å TDS (ppm)
            calibratedValue = (value / 1023.0) * maxTDS; // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è TDS
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TDS
            if (calibratedValue > maxTDS) {
                alert = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–ª–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç " + String(maxTDS) + " ppm.";
            }
        } else if (channel == 11) {
            float minPH = 7.0;
            float maxPH = 10.0;
            calibratedValue = minPH + ((value / 1023.0) * (maxPH - minPH)); // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è pH
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è pH
            if (calibratedValue > maxPH) {
                alert = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç " + String(maxPH) + ".";
            }
        } else if (channel == 15) {
            int maxTurbidity = 40; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –º—É—Ç–Ω–æ—Å—Ç–∏
            calibratedValue = (value / 1023.0) * maxTurbidity; // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è –º—É—Ç–Ω–æ—Å—Ç–∏
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º—É—Ç–Ω–æ—Å—Ç–∏
            if (calibratedValue > maxTurbidity) {
                alert = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º—É—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç " + String(maxTurbidity) + " NTU.";
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        results += labels[i] + ": " + String(calibratedValue) + "\n"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (alert != "") {
            results += alert + "\n"; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        }
    }
    return results; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
}


void checkWateringTime() {
    if (nextWateringTime > 0 && now() >= nextWateringTime) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        bot.sendMessage(fb::Message("–ü–æ—Ä–∞ –ø–æ–ª–∏—Ç—å –≤–∞—à —Ü–≤–µ—Ç–æ–∫! –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª–∏–≤–∞.", CHAT_ID));
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        nextWateringTime = 0;
        wateringDelay = 0; // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    }
}


String getWeatherDescription(String englishDescription) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
    if (englishDescription == "Partly cloudy") return "üå§ –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ";
    if (englishDescription == "Sunny") return "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ";
    if (englishDescription == "Overcast") return "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ";
    if (englishDescription == "Rain") return "‚òî –î–æ–∂–¥—å";
    if (englishDescription == "Clear") return "üåû –Ø—Å–Ω–æ";
    if (englishDescription == "Cloudy") return "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ";
    if (englishDescription == "Mist") return "üå´Ô∏è –ú–≥–ª–∞";
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return englishDescription; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
}

void greetUser() {
    fb::Message msg("üåº –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏! –ö–∞–∫ —è –º–æ–≥—É —É –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", CHAT_ID);
    bot.sendMessage(msg);
}

void getWeather() {
    if (WiFi.status() == WL_CONNECTED) {
        WiFiClient client;
        HTTPClient http;


        String url = "http://api.weatherapi.com/v1/current.json?key=" + apiKey + "&q=" + city;
        Serial.print("Requesting weather data from: ");
        Serial.println(url);


        http.begin(client, url);
        int httpCode = http.GET();


        if (httpCode > 0) {
            if (httpCode == HTTP_CODE_OK) {
                String payload = http.getString();
                Serial.println("Weather data received:");
                Serial.println(payload);


                // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
                DynamicJsonDocument doc(1024);
                DeserializationError error = deserializeJson(doc, payload);
                if (!error) {
                    String description = doc["current"]["condition"]["text"].as<String>();
                    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
                    description = getWeatherDescription(description);
                    
                    float temperature = doc["current"]["temp_c"];
                    String weatherMessage = "‚òÅÔ∏è–ü–æ–≥–æ–¥–∞ –≤ " + city + ": " + description + ", –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temperature) + "¬∞C";
                    bot.sendMessage(fb::Message(weatherMessage, CHAT_ID));
                } else {
                    Serial.println("Failed to parse JSON!"); // –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                }
            }
        } else {
            Serial.printf("Error on HTTP request: %s\n", http.errorToString(httpCode).c_str());
        }
        http.end();
    } else {
        Serial.println("WiFi not connected");
    }
}


void updateh(fb::Update& u) {
    if (u.isQuery()) {
        Serial.println("NEW QUERY");
        Serial.println(u.query().data());
        bot.answerCallbackQuery(u.query().id(), "query answered");
        String queryData = String(u.query().data().c_str());


        if (queryData == "/readings") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
            if (ds18b20.busy) {
                bot.sendMessage(fb::Message("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", u.query().from().id()));
            } else {
                startMeasurementDS18b20();
                delay(1000);
                getDataDS18B20();
                String muxResults = getMuxData();
                String results = "–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(ds18b20.temperature) + " C\n" + muxResults;
                bot.sendMessage(fb::Message(results, u.query().from().id()));
            }
        } else if (queryData == "/notifications") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            fb::Message msg("–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", u.query().from().id());
            fb::InlineMenu menu("–ü–æ–ª–∏–≤ ; –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Å—Ç—Ä–∞—Ç–æ–≤ ; –ü–æ–≥–æ–¥–∞", "watering;add_substrate;/weather");
            msg.setInlineMenu(menu);
            bot.sendMessage(msg);
        } else if (queryData == "watering") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–∏–≤"
            fb::Message msg("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–∫?", u.query().from().id());
            fb::InlineMenu menu("5 –º–∏–Ω ; 10 –º–∏–Ω ; 15 –º–∏–Ω ; 30 –º–∏–Ω ; 45 –º–∏–Ω ; 1 —á–∞—Å ; 2 —á–∞—Å–∞",
                                "watering_5;watering_10;watering_15;watering_30;watering_45;watering_60;watering_120");
            msg.setInlineMenu(menu);
            bot.sendMessage(msg);
        } else if (queryData.startsWith("watering_")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞
            if (queryData == "watering_5") wateringDelay = 5 * 60; // 5 –º–∏–Ω—É—Ç
            else if (queryData == "watering_10") wateringDelay = 10 * 60; // 10 –º–∏–Ω—É—Ç
            else if (queryData == "watering_15") wateringDelay = 15 * 60; // 15 –º–∏–Ω—É—Ç
            else if (queryData == "watering_30") wateringDelay = 30 * 60; // 30 –º–∏–Ω—É—Ç
            else if (queryData == "watering_45") wateringDelay = 45 * 60; // 45 –º–∏–Ω—É—Ç
            else if (queryData == "watering_60") wateringDelay = 1 * 60 * 60; // 1 —á–∞—Å
            else if (queryData == "watering_120") wateringDelay = 2 * 60 * 60; // 2 —á–∞—Å–∞
           
            time_t nowTime = now();
            nextWateringTime = nowTime + wateringDelay; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞
            bot.sendMessage(fb::Message("–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ " + String(wateringDelay / 60) + " –º–∏–Ω—É—Ç(—ã).", u.query().from().id()));
        } else if (queryData == "/advice") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–≤–µ—Ç—ã"
            fb::Message msg("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–≤–µ—Ç–∞:", u.query().from().id());
            fb::InlineMenu menu("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ; –í–ª–∞–∂–Ω–æ—Å—Ç—å ; –ü–æ—á–≤–∞ ; –£–¥–æ–±—Ä–µ–Ω–∏–µ ; –ö–æ—Ä–Ω–∏",
                                "temperature;humidity;soil;fertilizer;roots");
            msg.setInlineMenu(menu);
            bot.sendMessage(msg);
        } else if (queryData == "temperature") {
            // –°–æ–≤–µ—Ç—ã –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
            String adviceMessage = "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n"
                            "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 20-25¬∞C. "
                            "–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ–ø–∞–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.";
            bot.sendMessage(fb::Message(adviceMessage, u.query().from().id()));


            // –ó–∞–ø—Ä–æ—Å –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç–∞
            fb::Message feedbackMsg("–ë—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?", u.query().from().id());
            fb::InlineMenu feedbackMenu("üëç ; üëé", "helpful;not_helpful");
            feedbackMsg.setInlineMenu(feedbackMenu);
            bot.sendMessage(feedbackMsg);
        } else if (queryData == "humidity") {
            // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
            String adviceMessage = "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:\n"
                                "–ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ 50-70%. "
                                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.";
            bot.sendMessage(fb::Message(adviceMessage, u.query().from().id()));


            // –ó–∞–ø—Ä–æ—Å –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç–∞
            fb::Message feedbackMsg("–ë—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?", u.query().from().id());
            fb::InlineMenu feedbackMenu("üëç ; üëé", "helpful;not_helpful");
            feedbackMsg.setInlineMenu(feedbackMenu);
            bot.sendMessage(feedbackMsg);
        } else if (queryData == "soil") {
            // –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ—á–≤–µ
            String adviceMessage = "üå± –ü–æ—á–≤–∞:\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∫—É—é, —Ö–æ—Ä–æ—à–æ –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ—á–≤—É –¥–ª—è –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. "
                                "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å pH –¥–ª—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π.";
            bot.sendMessage(fb::Message(adviceMessage, u.query().from().id()));


            // –ó–∞–ø—Ä–æ—Å –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç–∞
            fb::Message feedbackMsg("–ë—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?", u.query().from().id());
            fb::InlineMenu feedbackMenu("üëç ; üëé", "helpful;not_helpful");
            feedbackMsg.setInlineMenu(feedbackMenu);
            bot.sendMessage(feedbackMsg);
        } else if (queryData == "fertilizer") {
            // –°–æ–≤–µ—Ç—ã –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º
            String adviceMessage = "üåº –£–¥–æ–±—Ä–µ–Ω–∏–µ:\n"
                                "–ü–æ–¥–∫–∞—Ä–º–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 4-6 –Ω–µ–¥–µ–ª—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. "
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±—Ä–µ–Ω–∏—è, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞–º.";
            bot.sendMessage(fb::Message(adviceMessage, u.query().from().id()));


            // –ó–∞–ø—Ä–æ—Å –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç–∞
            fb::Message feedbackMsg("–ë—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?", u.query().from().id());
            fb::InlineMenu feedbackMenu("üëç ; üëé", "helpful;not_helpful");
            feedbackMsg.setInlineMenu(feedbackMenu);
            bot.sendMessage(feedbackMsg);
        } else if (queryData == "roots") {
            // –°–æ–≤–µ—Ç—ã –ø–æ –∫–æ—Ä–Ω—è–º
            String adviceMessage = "ü™¥ –ö–æ—Ä–Ω–∏:\n"
                                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º –∫–æ—Ä–Ω–µ–π –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è. "
                                "–ï—Å–ª–∏ –∫–æ—Ä–Ω–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é –ø–æ—á–≤—É.";
            bot.sendMessage(fb::Message(adviceMessage, u.query().from().id()));


            // –ó–∞–ø—Ä–æ—Å –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç–∞
            fb::Message feedbackMsg("–ë—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?", u.query().from().id());
            fb::InlineMenu feedbackMenu("üëç ; üëé", "helpful;not_helpful");
            feedbackMsg.setInlineMenu(feedbackMenu);
            bot.sendMessage(feedbackMsg);
        } else if (queryData == "helpful") {
            bot.sendMessage(fb::Message("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –†–∞–¥, —á—Ç–æ —Å–æ–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω.", u.query().from().id()));
        } else if (queryData == "not_helpful") {
            bot.sendMessage(fb::Message("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ–º –Ω–∞—à–∏ —Å–æ–≤–µ—Ç—ã!", u.query().from().id()));
        } else if (queryData == "add_substrate") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Å—Ç—Ä–∞—Ç–æ–≤"
            bot.sendMessage(fb::Message("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–±—Å—Ç—Ä–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", u.query().from().id()));
        } else if (queryData == "/help") {
            String helpMessage = "üåø –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                                "1. üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                                "   ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞\n"
                                "   ‚Ä¢ –ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å (pH)\n"
                                "   ‚Ä¢ –ú—É—Ç–Ω–æ—Å—Ç—å –≤–æ–¥—ã\n"
                                "   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–ª–µ–π (TDS)\n\n"
                                "2. üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                                "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞\n"
                                "   ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–±—Å—Ç—Ä–∞—Ç–æ–≤\n\n"
                                "3. üí° –°–æ–≤–µ—Ç—ã - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º:\n"
                                "   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
                                "   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–∏–≤–∞\n"
                                "   ‚Ä¢ –ü–æ–¥–∫–æ—Ä–º–∫–∞\n\n"
                                "4. ‚öôÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π\n\n"
                                "5. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n\n"
                                "6. üîÑ –û–±–Ω–æ–≤–∏—Ç—å - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                                "‚ùóÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                                "‚Ä¢ –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (>30¬∞C)\n"
                                "‚Ä¢ –ü—Ä–∏ –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (<10¬∞C)\n"
                                "‚Ä¢ –í —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞\n"
                                "‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ç –Ω–æ—Ä–º—ã\n\n"
                                "üí¨ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é.";


            bot.sendMessage(fb::Message(helpMessage, u.query().from().id()));
        } else if (queryData == "/weather") {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥
            if (city == "") {
                bot.sendMessage(fb::Message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", u.query().from().id()));
                currentState = WAITING_FOR_CITY; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
            } else {
                // –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
                getWeather();
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
                fb::Message changeCityMsg("–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥?", u.query().from().id());
                fb::InlineMenu changeCityMenu("–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ; –ù–µ—Ç", "change_city;no_change");
                changeCityMsg.setInlineMenu(changeCityMenu);
                bot.sendMessage(changeCityMsg);
            }
        } else if (queryData == "change_city") {
            bot.sendMessage(fb::Message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", u.query().from().id()));
            currentState = WAITING_FOR_CITY; // –°–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        } else if (queryData == "no_change") {
            bot.sendMessage(fb::Message("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: " + city, u.query().from().id()));
        }
        } else {
            String userMessage = String(u.message().text().c_str());
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
            if (currentState == WAITING_FOR_CITY) {
                city = userMessage; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                getWeather(); // –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
                currentState = NORMAL; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return;
            }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        Serial.println("NEW MESSAGE");
        Serial.println(u.message().from().username());
        Serial.println(u.message().text());
        //String userMessage = String(u.message().text().c_str());


        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if (currentState == WAITING_FOR_CITY) {
            city = userMessage; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            bot.sendMessage(fb::Message("–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + city + ". –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /weather.", u.message().chat().id()));
            currentState = NORMAL; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return;
        }


        if (wateringScheduled) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞
            int hour, minute;
            if (sscanf(userMessage.c_str(), "%d:%d", &hour, &minute) == 2) {
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≤–∞
                time_t nowTime = now();
                tmElements_t timeElements;
                breakTime(nowTime, timeElements);
                timeElements.Hour = hour;
                timeElements.Minute = minute;
                timeElements.Second = 0;
                time_t userTime = makeTime(timeElements);
                if (userTime <= nowTime) {
                    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    userTime += 24 * 60 * 60;
                }
                nextWateringTime = userTime;
                wateringTime = String(hour) + ":" + (minute < 10 ? "0" : "") + String(minute);
                bot.sendMessage(fb::Message("–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + wateringTime + ".", u.message().chat().id()));
                wateringScheduled = false;
            } else {
                bot.sendMessage(fb::Message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 08:00.", u.message().chat().id()));
            }
        } else if (userName == "") {
            userName = userMessage;
            String welcomeMessage = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + userName + "! –í—ã–±–µ—Ä–∏—Ç–µ:";
            fb::Message msg(welcomeMessage, u.message().chat().id());
            fb::InlineMenu menu("–ü–æ–∫–∞–∑–∞–Ω–∏—è ; –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ; –°–æ–≤–µ—Ç—ã ; –ü–æ–≥–æ–¥–∞ ; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ; –û–±–Ω–æ–≤–∏—Ç—å ; –ü–æ–º–æ—â—å",
                                "/readings;/notifications;/advice;/weather;/stats;/refresh;/help");
            msg.setInlineMenu(menu);
            bot.sendMessage(msg);
        } else {
            bot.sendMessage(fb::Message(userName + ", " + userMessage, u.message().chat().id()));
        }
    }
}


void handleRoot() {
    String muxResults = getMuxData(); // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
    String html = "<html><head>";
    html += "<style>";
    html += "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4; }";
    html += "h1 { color: #4CAF50; }"; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    html += "h2 { color: #2196F3; }"; // –¶–≤–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    html += ".container { max-width: 800px; margin: auto; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); }";
    html += ".thermometer { width: 50px; height: 300px; background: #e0e0e0; border-radius: 25px; position: relative; margin: 20px auto; }";
    html += ".thermometer-fill { position: absolute; bottom: 0; width: 100%; border-radius: 25px; }";
    html += ".temperature-label { position: absolute; left: 1000px; font-size: 24px; color: #4CAF50; margin-top: -60px; }";
    html += ".results { white-space: pre-wrap; margin-top: 850px; }"; // –ü—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
    html += "table { width: 100%; border-collapse: collapse; margin-top: 20px; }";
    html += "th, td { border: 1px solid #ccc; padding: 10px; text-align: left; }";
    html += "th { background-color: #f2f2f2; }";
    html += "</style></head><body>";
    html += "<div class='container'>";




    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –¥–ª—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞
    float temperatureHeight = constrain(ds18b20.temperature * 10, 0, 300);
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    String fillColor;
    if (ds18b20.temperature <= 27) {
        fillColor = "green"; // –¥–æ 25¬∞C - –∑–µ–ª–µ–Ω—ã–π
    } else if (ds18b20.temperature > 27 && ds18b20.temperature <= 35) {
        fillColor = "yellow"; // –æ—Ç 25¬∞C –¥–æ 35¬∞C - –∂–µ–ª—Ç—ã–π
    } else {
        fillColor = "red"; // —Å–≤—ã—à–µ 35¬∞C - –∫—Ä–∞—Å–Ω—ã–π
    }


    html += "<h1>–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤</h1>";
    html += "<div class='thermometer'>";
    html += "<div class='thermometer-fill' style='height: " + String(temperatureHeight) + "px; background-color: " + fillColor + ";'></div>"; // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    html += "</div>";
    html += "<div class='temperature-label'>" + String(ds18b20.temperature) + " ¬∞C</div>";

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    html += "<h2>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã</h2>";
    html += "<table>";
    html += "<tr><th>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>";




    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ getMuxData)
    String results = muxResults; // –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ getMuxData
    String lines[3];
    int lineCount = 0;




    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    int startIndex = 0;
    while (startIndex < results.length()) {
        int endIndex = results.indexOf("\n", startIndex);
        if (endIndex == -1) endIndex = results.length();
        lines[lineCount] = results.substring(startIndex, endIndex);
        startIndex = endIndex + 1;
        lineCount++;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    for (int i = 0; i < lineCount; i++) {
        String label = lines[i].substring(0, lines[i].indexOf(":")); // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        String value = lines[i].substring(lines[i].indexOf(":") + 1); // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        html += "<tr><td>" + label + "</td><td>" + value + "</td></tr>";
    }


    html += "</table>"; // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    html += "</div>"; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    html += "</body></html>";
    server.send(200, "text/html; charset=UTF-8", html);
}



void setup() {
    Serial.begin(9600);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println(WiFi.localIP());


    ds18b20.setup();
    bot.attachUpdate(updateh);
    bot.setToken(BOT_TOKEN);
    bot.setPollMode(fb::Poll::Long, 20000);
    greetUser();
    server.on("/", handleRoot); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–æ—Ä–µ–Ω—å
    server.begin();


    getWeather(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
}




void loop() {
    server.handleClient();
    if (!ds18b20.busy) {
        ds18b20.start();
    }
    checkBusyDS18B20();


    if (!ds18b20.busy) {
        getDataDS18B20();
    }


    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis; // –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        getWeather(); // –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≥–æ–¥–æ–π
    }


    checkWateringTime();
    delay(3000);
    bot.tick();
}
